apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-agent-config
  namespace: ecoci-staging
data:
  agent.yaml: |
    server:
      log_level: info
    
    metrics:
      global:
        scrape_interval: 15s
        external_labels:
          cluster: ecoci-staging
          environment: staging
      
      configs:
      - name: default
        scrape_configs:
        - job_name: 'kubernetes-pods'
          kubernetes_sd_configs:
          - role: pod
          relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
        
        - job_name: 'auth-api'
          static_configs:
          - targets: ['auth-api-service:80']
          metrics_path: /metrics
        
        - job_name: 'badge-service'
          static_configs:
          - targets: ['badge-service-service:80']
          metrics_path: /metrics
        
        remote_write:
        - url: https://prometheus-prod-01-eu-west-0.grafana.net/api/prom/push
          basic_auth:
            username: $GRAFANA_CLOUD_PROMETHEUS_USER
            password: $GRAFANA_CLOUD_PROMETHEUS_API_KEY
    
    logs:
      configs:
      - name: default
        clients:
        - url: https://logs-prod-eu-west-0.grafana.net/loki/api/v1/push
          basic_auth:
            username: $GRAFANA_CLOUD_LOKI_USER
            password: $GRAFANA_CLOUD_LOKI_API_KEY
        positions:
          filename: /tmp/positions.yaml
        scrape_configs:
        - job_name: kubernetes-pods
          kubernetes_sd_configs:
          - role: pod
          pipeline_stages:
          - cri: {}
          relabel_configs:
          - source_labels: [__meta_kubernetes_pod_node_name]
            target_label: __host__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - action: replace
            replacement: $1
            separator: /
            source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_pod_name]
            target_label: job
          - action: replace
            source_labels: [__meta_kubernetes_namespace]
            target_label: namespace
          - action: replace
            source_labels: [__meta_kubernetes_pod_name]
            target_label: pod
          - action: replace
            source_labels: [__meta_kubernetes_pod_container_name]
            target_label: container
          - replacement: /var/log/pods/*$1/*.log
            separator: /
            source_labels: [__meta_kubernetes_pod_uid, __meta_kubernetes_pod_container_name]
            target_label: __path__
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: grafana-agent
  namespace: ecoci-staging
spec:
  selector:
    matchLabels:
      name: grafana-agent
  template:
    metadata:
      labels:
        name: grafana-agent
    spec:
      serviceAccount: grafana-agent
      containers:
      - name: grafana-agent
        image: grafana/agent:v0.35.0
        args:
        - -config.file=/etc/agent/agent.yaml
        - -prometheus.wal-directory=/tmp/agent/wal
        - -enable-features=integrations-next
        env:
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: GRAFANA_CLOUD_PROMETHEUS_USER
          valueFrom:
            secretKeyRef:
              name: grafana-cloud-credentials
              key: prometheus-user
        - name: GRAFANA_CLOUD_PROMETHEUS_API_KEY
          valueFrom:
            secretKeyRef:
              name: grafana-cloud-credentials
              key: prometheus-api-key
        - name: GRAFANA_CLOUD_LOKI_USER
          valueFrom:
            secretKeyRef:
              name: grafana-cloud-credentials
              key: loki-user
        - name: GRAFANA_CLOUD_LOKI_API_KEY
          valueFrom:
            secretKeyRef:
              name: grafana-cloud-credentials
              key: loki-api-key
        volumeMounts:
        - name: grafana-agent-config
          mountPath: /etc/agent
        - name: varlog
          mountPath: /var/log
          readOnly: true
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        ports:
        - containerPort: 8080
          name: http-metrics
        securityContext:
          privileged: true
          runAsUser: 0
      volumes:
      - name: grafana-agent-config
        configMap:
          name: grafana-agent-config
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      tolerations:
      - operator: Exists
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana-agent
  namespace: ecoci-staging
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: grafana-agent
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: grafana-agent
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: grafana-agent
subjects:
- kind: ServiceAccount
  name: grafana-agent
  namespace: ecoci-staging
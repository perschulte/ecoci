name: Deploy to Staging

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-west-2
  EKS_CLUSTER_NAME: ecoci-staging-eks

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || contains(github.event.head_commit.message, '[terraform]')
    
    permissions:
      id-token: write
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: |
          cd devops/terraform/environments/staging
          terraform init

      - name: Terraform Plan
        id: plan
        run: |
          cd devops/terraform/environments/staging
          terraform plan -no-color -out=tfplan
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan üìñ \`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Deploy Kubernetes manifests
        run: |
          # Apply base Kubernetes resources
          kubectl apply -f devops/k8s/base/
          
          # Apply staging-specific resources
          kubectl apply -f devops/k8s/staging/
          
          # Wait for deployments to be ready
          kubectl rollout status deployment/auth-api -n ecoci-staging --timeout=300s
          kubectl rollout status deployment/badge-service -n ecoci-staging --timeout=300s

      - name: Install/Upgrade AWS Load Balancer Controller
        run: |
          # Add EKS Helm repository
          helm repo add eks https://aws.github.io/eks-charts
          helm repo update
          
          # Install AWS Load Balancer Controller
          helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
            --namespace kube-system \
            --set clusterName=${{ env.EKS_CLUSTER_NAME }} \
            --set serviceAccount.create=false \
            --set serviceAccount.name=aws-load-balancer-controller \
            --set region=${{ env.AWS_REGION }} \
            --set vpcId=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=ecoci-staging-vpc" --query 'Vpcs[0].VpcId' --output text)

      - name: Deploy applications with Helm
        run: |
          # Deploy auth-api
          helm upgrade --install auth-api ./devops/helm/auth-api \
            --namespace ecoci-staging \
            --create-namespace \
            --set image.tag=latest \
            --set ingress.enabled=true \
            --set ingress.host=auth.stg.ecoci.dev \
            --wait --timeout=10m
          
          # Deploy badge-service
          helm upgrade --install badge-service ./devops/helm/badge-service \
            --namespace ecoci-staging \
            --create-namespace \
            --set image.tag=latest \
            --set ingress.enabled=true \
            --set ingress.host=badges.stg.ecoci.dev \
            --wait --timeout=10m

      - name: Run health checks
        run: |
          echo "Running health checks..."
          
          # Wait for load balancers to be ready
          sleep 60
          
          # Check auth-api health
          AUTH_URL=$(kubectl get ingress auth-api-ingress -n ecoci-staging -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          if [ ! -z "$AUTH_URL" ]; then
            curl -f "https://${AUTH_URL}/healthz" || echo "Auth API health check failed"
          fi
          
          # Check badge-service health
          BADGE_URL=$(kubectl get ingress badge-service-ingress -n ecoci-staging -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          if [ ! -z "$BADGE_URL" ]; then
            curl -f "https://${BADGE_URL}/healthz" || echo "Badge Service health check failed"
          fi

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke tests here
          kubectl get pods -n ecoci-staging
          kubectl get services -n ecoci-staging
          kubectl get ingress -n ecoci-staging

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Deployment to staging successful!"
            echo "üîó Auth API: https://auth.stg.ecoci.dev"
            echo "üîó Badge Service: https://badges.stg.ecoci.dev"
          else
            echo "‚ùå Deployment to staging failed!"
          fi
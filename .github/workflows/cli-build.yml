name: Build CLI Wheel

on:
  push:
    branches: [main]
    paths: ['cli/**']
  pull_request:
    branches: [main]
    paths: ['cli/**']
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  lint-and-test:
    name: Lint and Test CLI
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd cli
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Lint with flake8
        run: |
          cd cli
          flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Type check with mypy
        run: |
          cd cli
          mypy src/

      - name: Test with pytest
        run: |
          cd cli
          pytest tests/ -v --cov=src/green_ci --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./cli/coverage.xml
          flags: cli
          name: cli-coverage

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Bandit security scan
        run: |
          cd cli
          pip install bandit[toml]
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/

      - name: Run Safety check
        run: |
          cd cli
          pip install safety
          safety check -r requirements.txt

  build-wheel:
    name: Build Python Wheel
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools

      - name: Build wheel
        run: |
          cd cli
          python -m build --sdist --wheel --outdir dist/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTIONS_ROLE_ARN }}
          aws-region: us-west-2

      - name: Upload wheel to S3
        run: |
          cd cli
          VERSION=$(python setup.py --version)
          aws s3 cp dist/ s3://${{ secrets.ARTIFACTS_BUCKET }}/cli/v${VERSION}/ --recursive
          
          # Also upload with 'latest' tag
          aws s3 cp dist/ s3://${{ secrets.ARTIFACTS_BUCKET }}/cli/latest/ --recursive

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: CLI Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./cli/dist/
          asset_name: green-ci-wheel
          asset_content_type: application/zip